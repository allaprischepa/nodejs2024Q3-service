openapi: 3.0.0
paths:
  /user:
    post:
      operationId: UserController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: "Created: user created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: "Bad Request: request body does not contain required fields"
        "409":
          description: "Conflict: user already exists"
      summary: Create new user
      tags: &a1
        - User
    get:
      operationId: UserController_findAll
      parameters: []
      responses:
        "200":
          description: "OK: retrieved user list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserEntity"
      summary: Get all users
      tags: *a1
  /user/{id}:
    get:
      operationId: UserController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the user
          schema:
            example: b04df18d-cfe7-4117-80bb-9f5a04d53d23
            type: string
      responses:
        "200":
          description: "OK: retrieved user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: "Bad Request: id is not valid UUID"
        "404":
          description: "Not Found: user not found"
      summary: Get single user by id
      tags: *a1
    put:
      operationId: UserController_updatePassword
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the user
          schema:
            example: b04df18d-cfe7-4117-80bb-9f5a04d53d23
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordDto"
      responses:
        "200":
          description: "OK: updated user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: "Bad Request: id is not valid UUID"
        "404":
          description: "Not Found: user not found"
      summary: Update user password
      tags: *a1
    delete:
      operationId: UserController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the user
          schema:
            example: b04df18d-cfe7-4117-80bb-9f5a04d53d23
            type: string
      responses:
        "204":
          description: ""
      summary: Delete user
      tags: *a1
  /artist:
    post:
      operationId: ArtistController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "201":
          description: "Created: artist created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistEntity"
        "400":
          description: "Bad Request: request body does not contain required fields"
      summary: Create new artist
      tags: &a2
        - Artist
    get:
      operationId: ArtistController_findAll
      parameters: []
      responses:
        "200":
          description: "OK: retrieved artist list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtistEntity"
      summary: Get all artists
      tags: *a2
  /artist/{id}:
    get:
      operationId: ArtistController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the artist
          schema:
            example: 6476c336-c646-4c28-bbea-7390b385518a
            type: string
      responses:
        "200":
          description: "OK: retrieved artist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistEntity"
        "400":
          description: "Bad Request: id is not valid UUID"
        "404":
          description: "Not Found: artist not found"
      summary: Get single artist by id
      tags: *a2
    put:
      operationId: ArtistController_update
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the artist
          schema:
            example: 6476c336-c646-4c28-bbea-7390b385518a
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateArtistDto"
      responses:
        "200":
          description: "OK: updated artist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistEntity"
        "400":
          description: "Bad Request: id is not valid UUID"
        "404":
          description: "Not Found: artist not found"
      summary: Update artist info
      tags: *a2
    delete:
      operationId: ArtistController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the artist
          schema:
            example: 6476c336-c646-4c28-bbea-7390b385518a
            type: string
      responses:
        "204":
          description: ""
      summary: Delete artist
      tags: *a2
  /album:
    post:
      operationId: AlbumController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "201":
          description: "Created: album created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        "400":
          description: "Bad Request: request body does not contain required fields"
      summary: Create new album
      tags: &a3
        - Album
    get:
      operationId: AlbumController_findAll
      parameters: []
      responses:
        "200":
          description: "OK: retrieved album list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AlbumEntity"
      summary: Get all albums
      tags: *a3
  /album/{id}:
    get:
      operationId: AlbumController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the album
          schema:
            example: 7429cef1-0a5d-4fdd-9df4-2443d486d34a
            type: string
      responses:
        "200":
          description: "OK: retrieved album"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        "400":
          description: "Bad Request: id is not valid UUID"
        "404":
          description: "Not Found: album not found"
      summary: Get single album by id
      tags: *a3
    put:
      operationId: AlbumController_update
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the album
          schema:
            example: 7429cef1-0a5d-4fdd-9df4-2443d486d34a
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAlbumDto"
      responses:
        "200":
          description: "OK: updated album"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        "400":
          description: "Bad Request: id is not valid UUID"
        "404":
          description: "Not Found: album not found"
      summary: Update album info
      tags: *a3
    delete:
      operationId: AlbumController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the album
          schema:
            example: 7429cef1-0a5d-4fdd-9df4-2443d486d34a
            type: string
      responses:
        "204":
          description: ""
      summary: Delete album
      tags: *a3
  /track:
    post:
      operationId: TrackController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "201":
          description: "Created: track created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackEntity"
        "400":
          description: "Bad Request: request body does not contain required fields"
      summary: Create new track
      tags: &a4
        - Track
    get:
      operationId: TrackController_findAll
      parameters: []
      responses:
        "200":
          description: "OK: retrieved track list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TrackEntity"
      summary: Get all tracks
      tags: *a4
  /track/{id}:
    get:
      operationId: TrackController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the track
          schema:
            example: a0030c1c-6e2a-45fe-9653-6a8be16be998
            type: string
      responses:
        "200":
          description: "OK: retrieved track"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackEntity"
        "400":
          description: "Bad Request: id is not valid UUID"
        "404":
          description: "Not Found: track not found"
      summary: Get track by id
      tags: *a4
    put:
      operationId: TrackController_update
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the track
          schema:
            example: a0030c1c-6e2a-45fe-9653-6a8be16be998
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTrackDto"
      responses:
        "200":
          description: "OK: updated track"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackEntity"
        "400":
          description: "Bad Request: id is not valid UUID"
        "404":
          description: "Not Found: track not found"
      summary: Update track info
      tags: *a4
    delete:
      operationId: TrackController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the track
          schema:
            example: a0030c1c-6e2a-45fe-9653-6a8be16be998
            type: string
      responses:
        "204":
          description: ""
      summary: Delete track
      tags: *a4
  /favs:
    post:
      operationId: FavsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFavDto"
      responses:
        "201":
          description: ""
      tags: &a5
        - Favs
    get:
      operationId: FavsController_findAll
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a5
  /favs/{id}:
    get:
      operationId: FavsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
    patch:
      operationId: FavsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFavDto"
      responses:
        "200":
          description: ""
      tags: *a5
    delete:
      operationId: FavsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
info:
  title: Home Library Service
  description: Home music library service
  version: "0.1"
  contact: {}
tags: []
servers: []
components:
  schemas:
    UserEntity:
      type: object
      properties:
        id:
          type: string
          example: b04df18d-cfe7-4117-80bb-9f5a04d53d23
        login:
          type: string
          example: johndoe
        version:
          type: number
          example: 1
        createdAt:
          type: number
          example: 1731044862
        updatedAt:
          type: number
          example: 1731044862
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: User login
          example: johndoe
        password:
          type: string
          description: User password
          example: P@ssw0rd
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: Old user password
          example: P@ssw0rd
        newPassword:
          type: string
          description: New user password
          example: P@ssw0rdQwerty
      required:
        - oldPassword
        - newPassword
    ArtistEntity:
      type: object
      properties:
        id:
          type: string
          example: 6476c336-c646-4c28-bbea-7390b385518a
        name:
          type: string
          example: DJ Funky Marmalade
        grammy:
          type: boolean
          example: true
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: Artist name
          example: DJ Funky Marmalade
        grammy:
          type: boolean
          description: Artist grammy presense
          example: true
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: Artist name
          example: DJ Funky Marmalade
        grammy:
          type: boolean
          description: Artist grammy presense
          example: true
      required:
        - name
        - grammy
    AlbumEntity:
      type: object
      properties:
        id:
          type: string
          example: 7429cef1-0a5d-4fdd-9df4-2443d486d34a
        name:
          type: string
          example: Best 2024
        year:
          type: number
          example: 2024
        artistId:
          type: string
          example: 6476c336-c646-4c28-bbea-7390b385518a
      required:
        - id
        - name
        - year
        - artistId
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: Album name
          example: Best 2024
        year:
          type: number
          description: Album release year
          example: "2024"
        artistId:
          type: string
          description: Album artist id
          example: 6476c336-c646-4c28-bbea-7390b385518a
      required:
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: Album name
          example: Best 2024
        year:
          type: number
          description: Album release year
          example: "2024"
        artistId:
          type: string
          description: Album artist id
          example: 6476c336-c646-4c28-bbea-7390b385518a
      required:
        - name
        - year
        - artistId
    TrackEntity:
      type: object
      properties:
        id:
          type: string
          example: a0030c1c-6e2a-45fe-9653-6a8be16be998
        name:
          type: string
          example: Midnight Voyage
        artistId:
          type: string
          example: 6476c336-c646-4c28-bbea-7390b385518a
        albumId:
          type: string
          example: 7429cef1-0a5d-4fdd-9df4-2443d486d34a
        duration:
          type: number
          example: 205
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: Track name
          example: Midnight Voyage
        artistId:
          type: string
          description: Track artist id
          example: 6476c336-c646-4c28-bbea-7390b385518a
        albumId:
          type: string
          description: Track album id
          example: 7429cef1-0a5d-4fdd-9df4-2443d486d34a
        duration:
          type: number
          description: Track duration
          example: "205"
      required:
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: Track name
          example: Midnight Voyage
        artistId:
          type: string
          description: Track artist id
          example: 6476c336-c646-4c28-bbea-7390b385518a
        albumId:
          type: string
          description: Track album id
          example: 7429cef1-0a5d-4fdd-9df4-2443d486d34a
        duration:
          type: number
          description: Track duration
          example: "205"
      required:
        - name
        - artistId
        - albumId
        - duration
    CreateFavDto:
      type: object
      properties: {}
    UpdateFavDto:
      type: object
      properties: {}
