openapi: 3.0.0
paths:
  /user:
    post:
      operationId: UserController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: "Created: user created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: "Bad Request: request body does not contain required fields"
        "409":
          description: "Conflict: user already exists"
      summary: Create new user
      tags: &a1
        - User
    get:
      operationId: UserController_findAll
      parameters: []
      responses:
        "200":
          description: "OK: retrieved user list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserEntity"
      summary: Get all users
      tags: *a1
  /user/{id}:
    get:
      operationId: UserController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the user
          schema:
            example: b04df18d-cfe7-4117-80bb-9f5a04d53d23
            type: string
      responses:
        "200":
          description: "OK: retrieved user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: "Bad Request: id is not valid UUID"
        "404":
          description: "Not Found: user not found"
      summary: Get single user by id
      tags: *a1
    put:
      operationId: UserController_updatePassword
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the user
          schema:
            example: b04df18d-cfe7-4117-80bb-9f5a04d53d23
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordDto"
      responses:
        "200":
          description: "OK: updated user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: "Bad Request: id is not valid UUID"
        "404":
          description: "Not Found: user not found"
      summary: Update user password
      tags: *a1
    delete:
      operationId: UserController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: The ID (UUID) of the user
          schema:
            example: b04df18d-cfe7-4117-80bb-9f5a04d53d23
            type: string
      responses:
        "204":
          description: ""
      summary: Delete user
      tags: *a1
info:
  title: Home Library Service
  description: Home music library service
  version: "0.1"
  contact: {}
tags: []
servers: []
components:
  schemas:
    UserEntity:
      type: object
      properties:
        id:
          type: string
          example: b04df18d-cfe7-4117-80bb-9f5a04d53d23
        login:
          type: string
          example: johndoe
        version:
          type: number
          example: "1"
        createdAt:
          type: number
          example: "1731044862"
        updatedAt:
          type: number
          example: "1731044862"
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: User login
          example: johndoe
        password:
          type: string
          description: User password
          example: P@ssw0rd
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: Old user password
          example: P@ssw0rd
        newPassword:
          type: string
          description: New user password
          example: P@ssw0rdQwerty
      required:
        - oldPassword
        - newPassword
